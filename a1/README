/**
* CIS*4650 Warmup Assignment - Tagged Document Tokenizer
* Christian Cornelis
* ccorneli@uoguelph.ca
* S/N: 0939357
* January 30th, 2020
**/

Overview
- This program reads in a a tagged SGML document, tokenizes all tags and their contents, and filters out irrelevant tags.
- Irrelevant tags include "Byline", "Correction", "Correction-Date", "Dateline", "DocID", "Graphic", "Section", "Subject", and "Type"

Building and Testing
- The project can be compiled by running 'make' or 'make all'
- After the project is compiled, it can be ran tested by running the command
  'java Scanner < <PATH_TO_TAGGED_DOCUMENT'
- To remove all compiled and generated files, run 'make clean'

Assumptions and Limitations:
- Assumed that all text is included inside of a tag. Any text found outside of a tag is ignored.
- Punctuation tokens will only contain a single character.
- Hyphenated words that contain an apostrophe will be tokenized as APOSTROPHIZED,
  as per section 5 of the marking scheme.
- Tokens such as "students'" will NOT be tokenized as APOSTROPHIZED(students'), but will be tokenized
  as WORD(student) PUNCTUATION('), as I assumed apostrophized strings need to be string sequences separated
  by apostrophes, as per section5 of the marking scheme.
- '+' will be treated as punctuation

Test Plan:
- I began testing this tokenizer by creating test files in the test_data/ folder that
  contained all cases outlined in the marking scheme. This involved the following cases:
  - File contains only relevent tags
  - File contains only irrelevent tags
  - Hyphenated, apostrophised, and both hyphenated AND apostrophised words
  - <P> tags inside relevant and irrelevant tags
  - Extra closing tag in file
  - Extra opening tag in file
  - Opening and closing tags with spaces before and after the tag name
  - Opening tags containing attributes such as 'aligh="center"' and 'border=120px'
- I also compared the output of tokenizing the provided newsdata.txt file to that of the sample
  output provided using a string difference checker found at www.diffchecker.com
- I performed all of the steps outlined above on the SoCS Linux servers to ensure that the
  program would run as expected when being marked.

References:
- Referred to the provided Java/JFlex tokenizer for the tiny language provided by Dr. Song,
  which can be found at https://courselink.uoguelph.ca/d2l/le/content/609172/viewContent/2315875/View
